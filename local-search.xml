<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>neovim插件记录、用法</title>
    <link href="/2025/07/07/neovim%E6%8F%92%E4%BB%B6%E8%AE%B0%E5%BD%95%E3%80%81%E7%94%A8%E6%B3%95/"/>
    <url>/2025/07/07/neovim%E6%8F%92%E4%BB%B6%E8%AE%B0%E5%BD%95%E3%80%81%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="bullets-vim"><a href="#bullets-vim" class="headerlink" title="bullets-vim"></a><a href="https://github.com/bullets-vim/bullets.vim">bullets-vim</a></h2><p>功能：自动处理markdown中的列表序号。<br>快捷键：</p><table><thead><tr><th>按键</th><th>模式</th><th>功能</th></tr></thead><tbody><tr><td><code>&lt;cr&gt;</code></td><td>INSERT</td><td>换行并插入新的bullet</td></tr><tr><td><code>o</code></td><td>NORMAL</td><td>效果同上。</td></tr><tr><td><code>&lt;C-cr&gt;</code></td><td>INSERT</td><td>仅换行</td></tr><tr><td><code>gN</code></td><td>NORMAL&#x2F;VISUAL</td><td>对光标所在列表(或者所选中的部分)重排序</td></tr><tr><td><code>&gt;&gt;</code></td><td>NORMAL</td><td>缩进（同时调整编号，下皆同）</td></tr><tr><td><code>&lt;C-t&gt;</code></td><td>INSERT</td><td>缩进</td></tr><tr><td><code>&gt;</code></td><td>ViSUAL</td><td>缩进</td></tr><tr><td><code>&lt;&lt;</code></td><td>NORMAL</td><td>取消缩进</td></tr><tr><td><code>&lt;C-d&gt;</code></td><td>INSERT</td><td>取消缩进</td></tr><tr><td><code>&lt;</code></td><td>VISUAL</td><td>取消缩进</td></tr></tbody></table><h2 id="render-markdown"><a href="#render-markdown" class="headerlink" title="render-markdown"></a><a href="https://github.com/MeanderingProgrammer/render-markdown.nvim">render-markdown</a></h2><p>功能：文档超详细，配置非常简单的markdown渲染插件。建议用它替代<code>:LazyExtra</code>里的markdown模块。</p><ol><li>标题图标、padding，高亮范围。</li><li>代码块、callouts、链接图标。</li><li>列表美化。</li><li>等等。</li></ol><p>配置：<a href="https://github.com/MeanderingProgrammer/render-markdown.nvim?tab=readme-ov-file#setup">详情见此链接</a></p><div class="note note-info">            <p>要想舒舒服服编辑markdown文档还需要关闭拼写检查。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>neovim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>笔记</tag>
      
      <tag>终端</tag>
      
      <tag>编辑器</tag>
      
      <tag>neovim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pytest笔记（一）</title>
    <link href="/2025/07/07/pytest%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2025/07/07/pytest%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="测试框架的作用"><a href="#测试框架的作用" class="headerlink" title="测试框架的作用"></a>测试框架的作用</h2><ul><li>用例发现、管理、执行。</li><li>环境管理。</li><li>测试报告。</li></ul><h2 id="pytest对比unittest"><a href="#pytest对比unittest" class="headerlink" title="pytest对比unittest"></a>pytest对比unittest</h2><ul><li>需要手动安装、可以指定版本。</li><li>代码风格不是Java而是Python。</li><li>拥有更丰富的插件生态。</li><li>完全兼容unittest。</li></ul><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><ul><li>安装：<code>uv add pytest -U</code></li><li>启动方式：<ol><li>创建一个新文件添加<code>pytest.main()</code>。</li><li><code>pytest</code>：自动发现当前目录下的所有测试文件，执行所有测试用例。</li><li><code>pytest test_*.py</code>：执行指定的测试文件。</li><li><code>pytest test_*.py::test_func</code>：执行指定的测试函数。</li></ol></li></ul><h2 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h2><ul><li><p>结果种类</p><table><thead><tr><th>缩写</th><th>单词</th><th>含义</th></tr></thead><tbody><tr><td>.</td><td>passed</td><td>通过</td></tr><tr><td>F</td><td>failed</td><td>失败（用例执行报错）</td></tr><tr><td>E</td><td>error</td><td>出错（fixture执行报错）</td></tr><tr><td>s</td><td>skipped</td><td>跳过</td></tr><tr><td>X</td><td>xpassed</td><td>预期外的通过（不符合预期）</td></tr><tr><td>x</td><td>xfailed</td><td>预期内的失败（符合预期）</td></tr></tbody></table></li><li><p>用例发现规则和内容规则</p><ul><li>用例的发现规则——识别、加载用例的过程<br>步骤：<ol><li>遍历当前目录及子目录下的所有文件，例外：<code>venv</code>、<code>.*</code>。</li><li>打开<code>test_</code>开头或者<code>_test</code>结尾的python文件。</li><li>遍历所有<code>Test</code>开头的类（不过该类并非是用例）。</li><li>收集所有<code>test_</code>开头的<strong>函数或方法</strong>作为用例。</li></ol></li><li>用例的内容<ol><li>可调用（函数、方法、类、对象）。</li><li><code>test_</code>开头。</li><li>没有参数，但可以使用内置标记等手段使用参数。</li><li>没有返回值（8.4版本后加入）。</li></ol></li><li>练习：对加法函数进行断言。<div class="note note-info">            <p>注意本例里类和方法的命名方式，以及这种分组测试（封装）的设计思路。</p>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Returns the sum of a and b.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> a + b<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestAdd</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_int</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Tests the add function.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">assert</span> add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>) == <span class="hljs-number">5</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_str</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Tests the add function with string inputs.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">assert</span> add(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>) == <span class="hljs-string">&quot;12&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_list</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Tests the add function with list inputs.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">assert</span> add([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]) == [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="配置框架"><a href="#配置框架" class="headerlink" title="配置框架"></a>配置框架</h2><ul><li>改变pytest的默认规则，方式有三种：<ul><li><strong>命令参数</strong>，例如<code>pytest -v</code>，<code>-</code>开头。</li><li>在根目录创建一个<strong>pytest.ini</strong>配置文件，小写字母。</li><li>环境变量（很有限），大写字母。</li></ul></li><li>获取配置值的方式：<code>pytest -h</code>。</li><li>常见的命令参数:<ul><li><code>-v</code>: 增加详细输出。</li><li><code>-s</code>: 在用例中正常使用<strong>输入输出</strong>*，默认情况下pytest会捕获输出。</li><li><code>-x</code>: 快速退出，一旦有用例失败就退出。</li></ul></li><li><code>-m</code>: 用例筛选例如<code>pytest -m web</code>，只执行标记为<code>web</code>的用例。</li></ul><h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h2><ul><li>用例标记，装饰器：<code>@pytest.mark.标记名</code>，例如<code>@pytest.mark.web</code>。</li><li>标记的作用：筛选用例、分组用例、添加元数据。</li><li>用户自定义标，<strong>仅用作用例筛选</strong>，例如<code>@pytest.mark.slow</code>。使用步骤：<ol><li>注册，命令参数或配置文件。 <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[pytest]</span><br><br><span class="hljs-attr">markers</span> =<br>  api: 接口测试<br>  web: 慢速测试<br>  login: 登录测试<br></code></pre></td></tr></table></figure></li><li>标记，装饰器。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytest<br><br><span class="hljs-meta">@pytest.mark.slow</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_slow_function</span>():<br>  <span class="hljs-keyword">assert</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure></li><li>筛选，<code>pytest -m marker</code>。</li></ol></li></ul><ul><li>框架内置标记，可以<strong>增加特殊的执行效果</strong>，例如<code>@pytest.mark.skip</code>。<ul><li><code>skip</code>: 无条件跳过用例。</li><li><code>skipif</code>: 条件跳过用例。</li><li><code>xfail</code>: 预期失败。</li><li><code>parametrize</code>: 参数化用例。<br><strong>数据驱动测试&#x3D;参数化测试+数据文件</strong><br>含义是，根据数据文件的内容，动态决定用例的数量、内容。</li><li><code>usefixtures</code>: 使用fixture。</li></ul></li></ul><h2 id="数据驱动测试"><a href="#数据驱动测试" class="headerlink" title="数据驱动测试"></a>数据驱动测试</h2><ul><li>从数据文件中读取数据，以列表按顺序赋值给参数。</li><li>用例的数量由数据数量决定。<br>例子：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;a, b, c&quot;</span>, read_csv(<span class="hljs-params"><span class="hljs-string">&quot;data.csv&quot;</span></span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_ddt</span>(<span class="hljs-params">self, a, b, c</span>):<br>    <span class="hljs-keyword">assert</span> add(a, b) == c <br></code></pre></td></tr></table></figure></li></ul><h2 id="夹具fixture"><a href="#夹具fixture" class="headerlink" title="夹具fixture"></a>夹具fixture</h2><ol><li>创建一个fixture。</li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br>  <span class="hljs-comment"># 前置操作</span><br>  <span class="hljs-keyword">yield</span> <span class="hljs-comment"># 执行用例</span><br>  <span class="hljs-comment"># 后置操作</span><br></code></pre></td></tr></table></figure><ol start="2"><li>使用，以参数形式传递给用例。</li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_1</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><ol start="3"><li>使用，标记。</li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.mark.usefixtures(<span class="hljs-params"><span class="hljs-string">&quot;fgh&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_2</span>():<br>  <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><ol><li>自动使用fixture。<ul><li>在配置文件中设置<code>autouse = True</code>。</li><li>在用例中直接使用，不需要传递参数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">autouse=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br>    <span class="hljs-comment"># 前置操作</span><br>    <span class="hljs-keyword">yield</span><br>    <span class="hljs-comment"># 后置操作</span><br></code></pre></td></tr></table></figure></li><li>依赖使用。<ul><li>在一个fixture中使用另一个fixture。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>    <span class="hljs-comment"># 前置操作</span><br>    <span class="hljs-keyword">yield</span><br>    <span class="hljs-comment"># 后置操作</span><br><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">f1</span>):<br>    <span class="hljs-comment"># 使用f1的前置操作</span><br>    <span class="hljs-keyword">yield</span><br>    <span class="hljs-comment"># 使用f1的后置操作</span><br></code></pre></td></tr></table></figure></li><li>返回内容。</li><li>范围共享。</li></ol>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>python</tag>
      
      <tag>pytest</tag>
      
      <tag>测试</tag>
      
      <tag>测试框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>各类小工具（一）</title>
    <link href="/2025/06/30/%E5%90%84%E7%B1%BB%E5%B0%8F%E5%B7%A5%E5%85%B7%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2025/06/30/%E5%90%84%E7%B1%BB%E5%B0%8F%E5%B7%A5%E5%85%B7%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="查看图片"><a href="#查看图片" class="headerlink" title="查看图片"></a>查看图片</h2><table><thead><tr><th>名称</th><th>安装</th><th>用法</th><th>简介</th></tr></thead><tbody><tr><td>viu</td><td><code>brew install viu</code></td><td><code>viu img.jpg</code></td><td>以字符色块的形式显示图片</td></tr><tr><td>chafa</td><td><code>brew install chafa</code></td><td><code>chafa img.jpg</code></td><td>默认画面更加精细</td></tr></tbody></table><h2 id="终端命令"><a href="#终端命令" class="headerlink" title="终端命令"></a>终端命令</h2><table><thead><tr><th>名称</th><th>安装</th><th>用法</th><th>简介</th></tr></thead><tbody><tr><td>tldr</td><td><code>brew install tldr</code></br><code>npm install -g tldr</code></td><td><code>tldr 命令</code></td><td>查看命令用法，man的替代</td></tr></tbody></table><p><strong>注：</strong></p><ul><li><strong>tldr切换语言:</strong> 可以使用<code>tldr tldr</code>查看语言相关命令，生成配置（有命令），修改完写入配置（给了查看配置位置的命令）里，还需要使用更新命令，最后可以查看语言列表。</li></ul>]]></content>
    
    
    <categories>
      
      <category>实践指南</category>
      
      <category>小玩意</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>工具用法</tag>
      
      <tag>实践指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置一个舒服的wsl开发环境</title>
    <link href="/2025/06/26/%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%AA%E8%88%92%E6%9C%8D%E7%9A%84wsl%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2025/06/26/%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%AA%E8%88%92%E6%9C%8D%E7%9A%84wsl%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="🦦配置一个舒服的wsl开发环境"><a href="#🦦配置一个舒服的wsl开发环境" class="headerlink" title="🦦配置一个舒服的wsl开发环境"></a>🦦配置一个舒服的wsl开发环境</h1><h2 id="BUG-“wsl-检测到-localhost-代理配置，但未镜像到-WSL。NAT-模式下的-WSL-不支持-localhost-代理。”"><a href="#BUG-“wsl-检测到-localhost-代理配置，但未镜像到-WSL。NAT-模式下的-WSL-不支持-localhost-代理。”" class="headerlink" title="BUG: “wsl: 检测到 localhost 代理配置，但未镜像到 WSL。NAT 模式下的 WSL 不支持 localhost 代理。”"></a>BUG: “wsl: 检测到 localhost 代理配置，但未镜像到 WSL。NAT 模式下的 WSL 不支持 localhost 代理。”</h2><ol><li><p>打开或者创建%USERPROFILE%.wslconfig，添加</p> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[experimental]</span><br><span class="hljs-attr">autoMemoryReclaim</span>=gradual  <span class="hljs-comment"># gradual  | dropcache | disabled</span><br><span class="hljs-attr">networkingMode</span>=mirrored<br><span class="hljs-attr">dnsTunneling</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">firewall</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">autoProxy</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>关机<code>wsl --shutdown Debian</code>，重启<code>wsl -d Debian</code>。</p></li></ol><h2 id="安装brew包管理器"><a href="#安装brew包管理器" class="headerlink" title="安装brew包管理器"></a>安装brew包管理器</h2><ol><li>安装依赖项 <code>sudo apt-get install build-essential procps curl file git</code>。</li><li>安装Homebrew <code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</code>。</li><li>配置环境变量和软链接 <code>echo &#39;eval &quot;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)&quot;&#39; &gt;&gt; $HOME/.bash_profile</code>，<code>eval &quot;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)&quot;</code>。</li><li>验证安装成功 <code>brew doctor</code>。</li><li>用法：<ul><li><code>brew install &lt;package_name&gt;</code></li><li><code>brew remove &lt;package_name&gt;</code></li><li><code>brew list</code></li><li>删除不需要的依赖 <code>brew autoremove</code></li></ul></li><li>删除Homebrew <code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)&quot;</code></li></ol><h2 id="安装、配置nushell"><a href="#安装、配置nushell" class="headerlink" title="安装、配置nushell"></a>安装、配置nushell</h2><ol><li>安装nushell <code>brew install nushell</code></li><li>修改nushell为默认shell<ol><li>添加nu到shell列表里，有几种方式，行为可能因情况不确定，写在这作参考：<ul><li>brew安装nu的默认位置是<code>/home/linuxbrew/.linuxbrew/bin/nu</code>，故可以<code>echo &quot;/home/linuxbrew/.linuxbrew/bin/nu&quot; | sudo tee -a /etc/shells</code>。</li><li>在bash里执行<code>which nu | sudo tee -a /etc/shells</code>。</li></ul></li><li>修改当前用户的默认shell，这也有几种不确定的方式：<ul><li><code>chsh -s $(which nu)</code>，或使用默认位置。</li><li>直接修改<code>/etc/passwd</code>，将对应用户原本的<code>.../bash</code>改为nu的位置，root用户可能也需要修改。</li></ul></li><li>重启wsl，<code>exit</code>若无效，可以用<code>wsl --shutdown Debian</code>。</li></ol></li><li>一点小配置 <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># set default editor</span><br><span class="hljs-variable">$env</span>.config.buffer_editor = <span class="hljs-string">&quot;nvim&quot;</span><br><br><span class="hljs-comment"># cancle default message when boot</span><br><span class="hljs-variable">$env</span>.config.show_banner = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li><strong>注：</strong> 切换到nushell后环境变量都没了，<code>brew</code>、<code>nushell</code> 等都需要重新加入环境变量。</li></ol><h2 id="安装、配置neovim"><a href="#安装、配置neovim" class="headerlink" title="安装、配置neovim"></a>安装、配置neovim</h2><ol><li><strong>安装neovim：</strong><code>brew install neovim</code></li><li><strong>安装<a href="https://github.com/doctorfree/nvim-lazyman"><i class="iconfont icon-github-fill"></i>Lazyman</a></strong>。</li></ol><h3 id="Lazyman的各种问题"><a href="#Lazyman的各种问题" class="headerlink" title="Lazyman的各种问题"></a>Lazyman的各种问题</h3><ul><li>neovim版本需要高于0.9。</li><li>使用lazyman（可能需要手动加入环境变量）命令打开交互式配置界面。</li><li>菜单后面几个安装依赖的都得先装一下，之后再去安装配置。</li><li>配置到<code>nvim</code>上需要写入环境变量，以nushell为例<code>$env.NVIM_APPNAME = &#39;nvim-Python&#39;</code>。</li><li>复制、粘贴是有时会报错<code>clipboard: error invoking wl copy/paste failed to connect to a wayland server</code>，去<code>/usr/bin</code>将<code>wl-ccopy</code>和<code>wl-paste</code>删除即可。注：这与Wayland协议（用于ssh等场景）有关。</li></ul>]]></content>
    
    
    <categories>
      
      <category>实践指南</category>
      
      <category>大东西</category>
      
      <category>wsl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>终端</tag>
      
      <tag>实践</tag>
      
      <tag>记录</tag>
      
      <tag>x-cmd</tag>
      
      <tag>wsl</tag>
      
      <tag>Debian</tag>
      
      <tag>nushell</tag>
      
      <tag>brew</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>neovim配置</title>
    <link href="/2025/06/26/neovim%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/06/26/neovim%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><h3 id="配置文件在哪"><a href="#配置文件在哪" class="headerlink" title="配置文件在哪"></a>配置文件在哪</h3><p>在neovim的命令模式输入<code>:= vim.fn.stdpath(&quot;config&quot;)</code>可以查看配置文件所在的目录，win下默认为<code>~\AppData\Local\nvim\</code>，在此目录下创建&#x2F;修改主配置文件<code>init.lua</code>。</p><h3 id="模块化配置"><a href="#模块化配置" class="headerlink" title="模块化配置"></a>模块化配置</h3><p>在<code>init.lua</code>的同级目录创建<code>lua</code>目录用以存放各个模块，继而使用<code>require(&quot;module&quot;)</code>引入名为<code>module.lua</code>的模块。</p><p><strong>建议：</strong> 在<code>lua</code>下再细分，例如基础的配置放到<code>lua/core/</code>下，拓展的配置放到<code>lua/plugins/</code>，引入的时候使用<code>require(&quot;core.module&quot;)</code></p><h3 id="配置命令结构与一次性使用"><a href="#配置命令结构与一次性使用" class="headerlink" title="配置命令结构与一次性使用"></a>配置命令结构与一次性使用</h3><p>大多数配置命令都在<code>vim.opt.</code>之下，可以在命令模式使用例如<code>:lua vim.opt.number = true</code>对当前会话生效。</p><h2 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h2><h3 id="行号"><a href="#行号" class="headerlink" title="行号"></a>行号</h3><p>行号：<code>vim.opt.number = true</code></p><p>相对行号，便于快捷移动光标：<code>vim.opt.relativenumber = true</code></p><h3 id="高亮、最大长度"><a href="#高亮、最大长度" class="headerlink" title="高亮、最大长度"></a>高亮、最大长度</h3><p><code>vim.opt.cursorline = true</code></p><p><code>vim.opt.colorcolumn = &quot;80&quot;</code></p><h3 id="tab键行为"><a href="#tab键行为" class="headerlink" title="tab键行为"></a>tab键行为</h3><p>改为插入空格：<code>vim.opt.expandtab = true</code></p><p>一个制表符显示为多少空格：<code>vim.opt.tabstop = 4</code></p><p>行首缩进长度，0表示与<code>tabstop</code>一致<code>vim.opt.shiftwidth = 0</code></p><h3 id="配置更新相关"><a href="#配置更新相关" class="headerlink" title="配置更新相关"></a>配置更新相关</h3><p><code>vim.opt.autoread = true</code></p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>api: <code>vim.keymap.set(mode, lhs, rhs, opts)</code>。</p><p>参数解释：</p><ul><li>mode: 快捷键生效模式（nvim的模式，”n”是normal模式，”i”是insert模式等），可以是单一模式（字符）也可以是组合模式（table）。</li><li>lsh: 按键，其中，<ul><li>Ctrl + a: <code>&lt;C-a&gt;</code></li><li>Alt + a: <code>&lt;A-a&gt;</code></li></ul></li><li>rhs: 功能、映射的另一组按键、lua函数。</li><li>opts: table，额外配置。</li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>neovim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>笔记</tag>
      
      <tag>终端</tag>
      
      <tag>编辑器</tag>
      
      <tag>neovim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>🐆neovim使用笔记</title>
    <link href="/2025/06/20/neovim%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/06/20/neovim%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="🐆neovim使用笔记"><a href="#🐆neovim使用笔记" class="headerlink" title="🐆neovim使用笔记"></a>🐆neovim使用笔记</h1><h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><ul><li><strong>基础：</strong> <code>h、j、k、l</code>对应←↓↑→，<code>gg、G</code>跳转到文档头、尾。</li><li><strong>word跳转：</strong> <code>w、e</code>跳转到后一个“word的开头、结尾”，<code>b</code>跳转到前一个“word的开头”。不含除<code>_</code>外的标点符号。</li><li><strong>WORD跳转：</strong><code>W、E</code>跳转到后一个“WORD的开头、结尾”，<code>B</code>跳转到前一个“WORD的开头”。“WORD”以空格为单位。</li><li><strong>注：</strong><ul><li>“word”的描述很繁琐，但是含义很简单，故不多赘述。</li><li>以上快捷键都可以与数字搭配使用。</li><li>基础移动会以方向的尽头终止，如<code>100l</code>若超过该行剩余字符数则会移动到该行末尾。</li><li>但是，word跳转的语义是“上一个、下一个”，只要没有到文档头尾，就不会终止跳转。</li></ul></li><li>根据字符跳转：<code>f、F</code>分别表示后一个字符、前一个字符（行内）。例如<code>2fs</code>表示跳转到后面第二个”s”的位置。</li></ul><h2 id="复制、粘贴、剪切"><a href="#复制、粘贴、剪切" class="headerlink" title="复制、粘贴、剪切"></a>复制、粘贴、剪切</h2><ul><li><p><strong>基础：</strong> <code>y &lt;motion&gt;</code>复制，<code>d &lt;motion&gt;</code>删除，<code>c &lt;motion&gt;</code>删除并进入插入模式，<code>p、P</code>在光标的右侧、左侧粘贴。</p><table><thead><tr><th align="center"></th><th align="center">描述</th><th align="center">成员</th></tr></thead><tbody><tr><td align="center">inclusive motion</td><td align="center">仅有顺序，<strong>包含边界</strong></td><td align="center">e</td></tr><tr><td align="center">exclusive motion</td><td align="center"><strong>顺序，仅不包含结尾</strong></br><strong>逆序，仅不包含开头</strong></td><td align="center">w、l</br>b、h</td></tr></tbody></table><ul><li><strong>文档头尾、一行的头尾都会有特殊</strong>，以上描述以移动的“预期”效果为基础，例如，文档最后一个word上再按<code>w</code>只会移动到该word的末尾，但是“预期”会移动到下一个的开头。故依然会包含整个word。</li><li>表格里的开头、结尾是移动方向的头和尾，不是顺序方向。</li></ul></li><li><p><strong>行级操作：</strong></p><table><thead><tr><th align="center">命令</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center"><code>yy</code></td><td align="center">复制一整行</td></tr><tr><td align="center"><code>dd</code></td><td align="center">删除一整行</td></tr><tr><td align="center"><code>y j/k</code></td><td align="center">包含当前行到目标行</td></tr><tr><td align="center"><code>d j/k</code></td><td align="center">同理</td></tr><tr><td align="center"><code>p、P</code></td><td align="center">在下一行、上一行粘贴</td></tr></tbody></table></li><li><p><strong>text object操作：</strong> <code>&lt;verb&gt; &lt;prep&gt; &lt;text object&gt;</code></p><ul><li><p><code>prep</code>: <code>i</code>nnner，<code>a</code>round</p></li><li><p>常用文本对象</p><table><thead><tr><th>文本对象</th><th>作用范围</th><th>示例命令</th><th>效果</th></tr></thead><tbody><tr><td><code>iw</code> &#x2F; <code>aw</code></td><td>单词（word）</td><td><code>ciw</code></td><td>修改当前单词（不含空格）</td></tr><tr><td><code>iW</code> &#x2F; <code>aW</code></td><td>大单词（WORD，含标点）</td><td><code>diW</code></td><td>删除当前大单词（如 “hello!”）</td></tr><tr><td><code>is</code> &#x2F; <code>as</code></td><td>句子（sentence）</td><td><code>vas</code></td><td>选择当前句子</td></tr><tr><td><code>ip</code> &#x2F; <code>ap</code></td><td>段落（paragraph）</td><td><code>dap</code></td><td>删除当前段落（含空行）</td></tr><tr><td><code>i&quot;</code> &#x2F; <code>a&quot;</code></td><td><strong>双引号</strong>内内容</td><td><code>yi&quot;</code></td><td>复制引号内文本（不含引号）</td></tr><tr><td><code>i&#39;</code> &#x2F; <code>a&#39;</code></td><td>单引号内内容</td><td><code>ci&#39;</code></td><td>修改单引号内文本</td></tr><tr><td><code>i`</code> &#x2F; <code>a`</code></td><td>反引号内内容</td><td><code>di`</code></td><td>删除反引号内代码</td></tr><tr><td><code>i(</code> &#x2F; <code>a(</code> <br /> (<code>ib</code> &#x2F; <code>ab</code>)</td><td><strong>圆括号</strong>内内容</td><td><code>ci(</code></td><td>修改括号内文本（不含括号）</td></tr><tr><td><code>i[</code> &#x2F; <code>a[</code></td><td>方括号内内容</td><td><code>vi[</code></td><td>选择方括号内文本</td></tr><tr><td><code>i&#123;</code> &#x2F; <code>a&#123;</code> <br /> (<code>iB</code> &#x2F; <code>aB</code>)</td><td><strong>花括号</strong>内内容</td><td><code>di&#123;</code></td><td>删除代码块内容（不含 {}）</td></tr><tr><td><code>it</code> &#x2F; <code>at</code></td><td>XML&#x2F;HTML <strong>标签</strong>内容</td><td><code>cit</code></td><td>修改标签内文本（如 <code>&lt;div&gt;内容&lt;/div&gt;</code>）</td></tr><tr><td><code>i&lt;</code> &#x2F; <code>a&lt;</code></td><td><strong>尖括号</strong>内内容（如泛型）</td><td><code>di&lt;</code></td><td>删除 <code>&lt;T&gt;</code> 内部内容</td></tr></tbody></table></li></ul></li></ul><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="命令-e-dit"><a href="#命令-e-dit" class="headerlink" title="命令:e(dit)"></a>命令<code>:e(dit)</code></h3><p>打开文件，相对路径、绝对路径都可以。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>neovim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>笔记</tag>
      
      <tag>终端</tag>
      
      <tag>编辑器</tag>
      
      <tag>neovim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《齐桓公伐楚》笔记</title>
    <link href="/2025/06/19/%E3%80%8A%E9%BD%90%E6%A1%93%E5%85%AC%E4%BC%90%E6%A5%9A%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/06/19/%E3%80%8A%E9%BD%90%E6%A1%93%E5%85%AC%E4%BC%90%E6%A5%9A%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="字、詞、表达記錄"><a href="#字、詞、表达記錄" class="headerlink" title="字、詞、表达記錄"></a>字、詞、表达記錄</h2><ol><li>夾輔，輔佐。</li></ol><h2 id="文章細節"><a href="#文章細節" class="headerlink" title="文章細節"></a>文章細節</h2><ol><li><blockquote><p>唯是風馬牛不相及也</p></blockquote><p>風，指發情。這句話的意思是，發情了的牲畜也碰不到一起。</p></li></ol><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2>]]></content>
    
    
    <categories>
      
      <category>古代汉语</category>
      
      <category>王力《古代汉语》笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>古代汉语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《郑伯克段于鄢》筆記</title>
    <link href="/2025/06/19/%E3%80%8A%E9%83%91%E4%BC%AF%E5%85%8B%E6%AE%B5%E4%BA%8E%E9%84%A2%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/06/19/%E3%80%8A%E9%83%91%E4%BC%AF%E5%85%8B%E6%AE%B5%E4%BA%8E%E9%84%A2%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="字、詞、表达記錄"><a href="#字、詞、表达記錄" class="headerlink" title="字、詞、表达記錄"></a>字、詞、表达記錄</h2><ol><li><strong>叔</strong>，生莊公及共叔段。古人命字常以伯（孟）、仲、叔、季表示長幼次序，但是會結合具體情況使用。在這裏，鄭莊公兄弟只有兩人，因此弟弟稱為“叔”。而“季”則用於兄弟多人的情況。</li><li><strong>亟</strong>，亟請於武公。讀做qì是，意屢次。也讀做jí，意急忙。</li><li><strong>都</strong>，大城。漢以後，“都”才指國都。<strong>補充：</strong> <strong>京</strong>，大。先秦時，“京師”連用才指國都。</li><li><strong>若&#x2F;奈&#x2F;如 + 之&#x2F;若 + 何</strong>，對他怎麼辦。語法上這是动词性凝固结构，是先秦特有的疑问短语，不可拆解。</li><li><strong>斃</strong>，倒下去。多行不義，必自斃。</li><li><strong>姑</strong>，暫且。本意是父親的母親、姐妹，或者丈夫的姐妹，她們往往展現出緩和、安撫、遷就、妥協的姿態，因此“姑”慢慢引申為一種處理事情的態度，這已經比較接近“暫且”的含義。</li><li><strong>暱</strong>，不義不暱。音nì，同“昵”，親近。這句話的意思是，段既然不義，就不能籠住民心。</li><li><strong>具</strong>，齊備、完整。具眼，意為眼力好，見識高；具瞻，意為眾人瞻仰。而具臣卻是指備位充數，不稱職的臣子。具臣可以理解為表面上完美的臣子，因為真正的“具臣”不可能存在，它對一個臣子的要求是方方面面，甚至是矛盾的。姑此說乃諷刺。而“具眼”、“具瞻”等是可以實現的。</li><li><strong>施</strong>，（潁考叔）愛其母，施及莊公。讀作yì，延伸，延續。</li></ol><h2 id="文章細節"><a href="#文章細節" class="headerlink" title="文章細節"></a>文章細節</h2><ol><li><blockquote><p>（姜氏）請京，（莊公）使（共叔段）居之，（人們）謂之京城大（tài）叔。</p></blockquote><p>杜预《春秋左传注》中說：“大叔，言寵之逾制，非禮也。大音泰。”</p></li><li><blockquote><p>既而大叔命西鄙北鄙貳於己。</p></blockquote><p> 貳，兩屬。這句話的意思是，不久之後，共叔段命令西部、北部邊邑的守臣效忠莊公的同時效忠自己。</p></li><li><blockquote><p>無生民心。</p></blockquote><p>這句話的意思是，不要是民眾產生二心。在古文語境裏，“民心”本就具有一心的預設，就像是個常識，這是對統治者一體的心。這個時候如果說生民心，那便在原本的心之外另一個心，也即二心。</p></li></ol><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><p>說《春秋》微言大義，而《左傳》為其註解，可我讀了本篇後依然無法理解所謂“大義”。</p><p>文章開頭就讓人眉頭緊皺——姜氏因為生莊公時難產，所以討厭莊公。這讓我想起了帶小孩的場景，小孩子頑皮摔了一跤，很多大人有意無意地會引導小孩子把摔跤的責任歸咎於地不是好地。姑常常看到大人抱著小孩，邊拍打各種事物，邊說：“壞xx，惹我家寶哭了”。這個法子似乎真有效。姜氏就是這麽個小孩子，可難產怪不得地，更怪不得自己，所以是莊公的過錯。很多現代人也會有類似的心理，</p><p>再後來段與姜氏謀反被平定，莊公與之“隨而相見”，賦詩作樂，母子如初。態度轉變之快讓人難以理解。疼愛的小兒子被討厭的大兒子打敗了，她大兒子沒有深仇大恨；又或者，偏愛小兒子，意圖推翻大兒子，她也不覺得對大兒子有愧。這種時候，她沒有選擇硬剛到底，也沒有選擇真誠道歉。而是選擇把過去埋葬。這母親做得也太容易了。這就是歷史上的“普通人”，就像我們身邊常見的一個普通女生，沒有對自己人格的要求、反思，缺乏對他人的體諒、共情，而且不要臉。</p><p>對本文主旨的主流理解是揭露莊公的偽裝與奸詐。我覺得莊公之所以被認為惡，是因為他發現了道德的漏洞，現在叫“站在道德的高地”。這場事件裏，莊公是被置於危機的，叛亂的、不公的是段和姜氏，正因如此莊公利用了他之惡，將自己塑造成受害者，但是實際上他掌握了一切。無疑，莊公是權謀的高手，但是他是否是惡？我認為不是。他的做法是為了解決問題的同時獲得好名聲，那為什麼不做這些虛偽的鋪墊就無法獲得好名聲呢？莊公甫一即位，姜氏和段就小動作不斷，這時下手，可能會被說多疑猜忌、心胸狹小云云。段日益膨脹時下手，罪證不足難以根除，若它日再起禍患，可能會被評價為優柔寡斷。以上是我的猜測，但是可以想到想要在所有人嘴裏都是好名聲是很難的事情，不僅得靠個人品德，還得看氣運，很多事情發生之前都無法準確預測。姜氏可以開城門做內應就說明了問題，姜氏絕不是省油的燈，她不是有德之人，但有一定權勢。莊公的處境也有一定的危險性。所以莊公選擇先隱忍，一方面可以一擊必殺，另一方面也可以麻痺對手降低自己的風險，同時也可以儘可能獲得好名聲。為了保全自己使用計謀，無可厚非。至於他有沒有為了好名聲偽裝自己，誰也不知道，況且是與不是也並非重要的事情。倘若莊公為了名聲選擇了更危險更不理智的方法，那才是真正的虛偽。</p>]]></content>
    
    
    <categories>
      
      <category>古代汉语</category>
      
      <category>王力《古代汉语》笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>古代汉语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>添加自定义HTML页面</title>
    <link href="/2025/06/18/%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89HTML%E9%A1%B5%E9%9D%A2/"/>
    <url>/2025/06/18/%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89HTML%E9%A1%B5%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="添加自定义HTML页面"><a href="#添加自定义HTML页面" class="headerlink" title="添加自定义HTML页面"></a>添加自定义HTML页面</h1><h2 id="步骤与说明"><a href="#步骤与说明" class="headerlink" title="步骤与说明"></a>步骤与说明</h2><ol><li><code>hexo new page 页面名称</code> 创建新的页面。在source目录下会生成一个文件夹，文件夹里有个index.md。</li><li>可以自定义一个layout，然后在index.md里编写新页面。这种方式适合创建一类页面，以后都用自定义的layout。layout目录位于主题目录下。</li><li>也可以改用index.html，在Front-matter里写上<code>layout: false</code>，这样就可以完全自定义页面了，不会因为hexo的默认行为产生混乱。</li></ol><p><strong>实践：</strong> 参见我用Deepseek写的<a href="http://lixiang.us.kg/snake" title="http:&#x2F;&#x2F;lixiang.us.kg&#x2F;snake">贪吃蛇</a>，源文件位于<a href="https://github.com/weimoyo/weimoyo.github.io/tree/gh-source/source/snake" title="Github" target="_blank" rel="noopener noreferrer"><i class="iconfont icon-github-fill"></i></a></p>]]></content>
    
    
    <categories>
      
      <category>实践指南</category>
      
      <category>大东西</category>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>实践</tag>
      
      <tag>记录</tag>
      
      <tag>Hexo</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>🐳docker使用笔记</title>
    <link href="/2025/06/17/docker%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/06/17/docker%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="🐳docker使用笔记"><a href="#🐳docker使用笔记" class="headerlink" title="🐳docker使用笔记"></a>🐳docker使用笔记</h1><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><h3 id="运行Dockerfile时“permission-denied”"><a href="#运行Dockerfile时“permission-denied”" class="headerlink" title="运行Dockerfile时“permission denied”"></a>运行Dockerfile时“permission denied”</h3><p><strong>部分报错：</strong><code>ERROR: permission denied while trying to connect to the Docker daemon socket</code><br><strong>解决方法：</strong></p><ul><li><code>sudo usermod -aG docker $USER</code></li><li>需注销或重启才能生效，为的是让shell使用docker组的权限</li><li>或为当前终端临时添加权限，<code>newgrp docker</code></li><li>可以用<code>groups</code>指令看当前shell是否拥有docker权限</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>🕷️markdown语法笔记</title>
    <link href="/2025/06/16/markdown%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/06/16/markdown%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="🕷️markdown语法笔记"><a href="#🕷️markdown语法笔记" class="headerlink" title="🕷️markdown语法笔记"></a>🕷️markdown语法笔记</h1><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ol><li><p>行内链接：<code>[显示文本](链接地址 &quot;可选标题&quot;)</code></p></li><li><p>引用式链接：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">显示文本</span>][<span class="hljs-symbol">链接标识</span>]<br><br>[<span class="hljs-symbol">链接标识</span>]: <span class="hljs-link">链接地址 &quot;可选标题&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>直接显示URL：<code>&lt;https://markdown.org&gt;</code></p></li><li><p>图片链接：<code>[![图片替代文本](图片URL)](链接地址)</code></p></li></ol><h3 id="emoji"><a href="#emoji" class="headerlink" title="emoji"></a>emoji</h3><ul><li><code>win + .</code>打开系统自带的emoji搜索</li><li><a href="https://www.emojiall.com/zh-hans">emoji中文网</a>等复制粘贴</li><li>使用标签符号简码，需要安装Markdown Emoji插件，语法<code>:joy:</code>，效果:joy:。（此方法hexo不支持）</li><li>fluid主题内置了一些图标，在配置about页的时候用到了，在文档里也可以如<code>&lt;i class=&quot;iconfont icon-github-fill&quot;&gt;&lt;/i&gt;</code>的方式使用，带链接的方式：<ul><li><code>[&lt;i class=&quot;iconfont icon-github-fill&quot;&gt;&lt;/i&gt;](https://github.com/weimoyo/weimoyo.github.io/tree/gh-source/source/snake)</code></li><li><code>&lt;a href=&quot;https://github.com/weimoyo/weimoyo.github.io/tree/gh-source/source/snake)&quot; title=&quot;GitHub&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;i class=&quot;iconfont icon-github-fill&quot;&gt;&lt;/i&gt;&lt;/a&gt;</code></li></ul></li><li>fluid内置的图标的便捷使用方式，添加一个图标插件：<ol><li><p>在主题目录的scripts目录里创建一个icon.js，内容如下</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">tag</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;icon&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>) &#123;<br><span class="hljs-keyword">const</span> iconClass = args[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">const</span> link = args[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">const</span> tip = args[<span class="hljs-number">2</span>];<br><br><span class="hljs-keyword">if</span> (!iconClass) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">// 智能判断基础类</span><br><span class="hljs-keyword">let</span> baseClass = <span class="hljs-string">&#x27;iconfont&#x27;</span>; <span class="hljs-comment">// 默认是 iconfont</span><br><span class="hljs-keyword">if</span> (iconClass.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;fa-&#x27;</span>)) &#123;<br>   baseClass = <span class="hljs-string">&#x27;fa&#x27;</span>; <span class="hljs-comment">// 如果以 fa- 开头，则是 Font Awesome</span><br>&#125;<br><br><span class="hljs-keyword">let</span> iconHtml = <span class="hljs-string">`&lt;i class=&quot;<span class="hljs-subst">$&#123;baseClass&#125;</span> <span class="hljs-subst">$&#123;iconClass&#125;</span>&quot;&gt;&lt;/i&gt;`</span>;<br><br><span class="hljs-keyword">if</span> (link) &#123;<br>   <span class="hljs-keyword">const</span> titleAttr = tip ? <span class="hljs-string">`title=&quot;<span class="hljs-subst">$&#123;tip&#125;</span>&quot;`</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br>   iconHtml = <span class="hljs-string">`&lt;a href=&quot;<span class="hljs-subst">$&#123;link&#125;</span>&quot; <span class="hljs-subst">$&#123;titleAttr&#125;</span> target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;<span class="hljs-subst">$&#123;iconHtml&#125;</span>&lt;/a&gt;`</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> iconHtml;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>三种使用方式</p><ul><li>只显示图标<code>&#123;% icon icon-github-fill %&#125;</code>:<i class="iconfont icon-github-fill"></i></li><li>带链接的图标<code>&#123;% icon icon-github-fill https://github.com/weimoyo %&#125;</code>:<a href="<https://github.com/weimoyo>"  target="_blank" rel="noopener noreferrer"><i class="iconfont icon-github-fill"></i></a></li><li>带链接和提示的图标<code>&#123;% icon icon-github-fill https://github.com/weimoyo GitHub %&#125;</code>:<a href="<https://github.com/weimoyo>" title="GitHub" target="_blank" rel="noopener noreferrer"><i class="iconfont icon-github-fill"></i></a></li></ul></li></ol></li></ul><h3 id="拼音"><a href="#拼音" class="headerlink" title="拼音"></a>拼音</h3><p><strong>编辑器：</strong> VSCode</p><p><strong>步骤：</strong></p><ol><li><p>命令面板&#x3D;&gt;Snippets: Configure Snippets&#x3D;&gt;markdown</p></li><li><p>使用预先准备的<a href="https://pan.quark.cn/s/9d21b46229ab">markdown.json</a></p></li><li><p>在setting.json里配置，必须专门配置markdown格式。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;[markdown]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-attr">&quot;editor.quickSuggestions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>         <span class="hljs-attr">&quot;other&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;on&quot;</span><br>     <span class="hljs-punctuation">&#125;</span><br> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>Markdown All in One等插件的设置对此没有影响。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>🐙x-cmd实践记录</title>
    <link href="/2025/06/16/x-cmd%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/06/16/x-cmd%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="🐙x-cmd实践记录"><a href="#🐙x-cmd实践记录" class="headerlink" title="🐙x-cmd实践记录"></a><a href="https://cn.x-cmd.com/">🐙x-cmd</a>实践记录</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在powershell里安装，参考<a href="https://cn.x-cmd.com/start/powershell">https://cn.x-cmd.com/start/powershell</a>，只需要运行一条指令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">System.Text.Encoding</span>]::GetEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>).GetString(<span class="hljs-variable">$</span>(<span class="hljs-built_in">Invoke-WebRequest</span> <span class="hljs-literal">-Uri</span> <span class="hljs-string">&quot;https://get.x-cmd.com/x-cmd.ps1&quot;</span>).RawContentStream.ToArray()) | <span class="hljs-built_in">Invoke-Expression</span><br></code></pre></td></tr></table></figure><h2 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h2><ol><li><code>x starship</code>和<code>x ohmyposh</code>是两个主题模块，直接运行即可打开TUI交互选择。</li><li>需要安装<a href="https://www.nerdfonts.com/font-downloads">Nerd Fonts</a>，否则图标无法正常显示。推荐选择（gemini 2.5 pro），<ul><li>FiraCode Nerd Font (非常流行，支持编程连字)</li><li>JetBrains Mono Nerd Font (JetBrains IDE 的默认字体，非常清晰)</li><li>MesloLGS NF (Powerlevel10k 主题官方推荐，兼容性极佳)</li></ul></li><li>效果，<img src="https://pub-85c6ace1f3f74dfdbd0f332fbb2c2f97.r2.dev/PicGo/starship%E6%95%88%E6%9E%9C.png" alt="starship效果"></li></ol><h2 id="使用大模型，以Deepseek为例"><a href="#使用大模型，以Deepseek为例" class="headerlink" title="使用大模型，以Deepseek为例"></a>使用大模型，以Deepseek为例</h2><ol><li><code>x deepseek init</code>进行交互式配置，只需要提供key。</li><li><code>a:ds</code>和<code>a:dsr1</code>使用<ul><li>对话<code>a:ds &quot;用户提示词&quot;</code></li><li><code>a:ds -f 本地文件 &quot;用户提示词&quot;</code></li></ul></li><li><code>a:ds -f 本地文件 &quot;用户提示词&quot; &gt;&gt; ds.md 2&gt;&amp;1</code>可以输出到文档里，但是中文会乱码<ul><li><strong>原因：</strong> PowerShell 7 查看 <code>[System.Console]::OutputEncoding</code> 的设置，发现是 GBK。于是，它用 GBK 的规则去“错误地”解码了这串 UTF-8 的字节流，在内存中得到了一堆乱码字符串。</li><li><strong>解决方法：</strong>  <ol><li>修改powershell配置文件 <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">notepad <span class="hljs-variable">$PROFILE</span><br>如果不存在，新建<br><span class="hljs-built_in">New-Item</span> <span class="hljs-literal">-Path</span> <span class="hljs-variable">$PROFILE</span> <span class="hljs-literal">-ItemType</span> File <span class="hljs-literal">-Force</span><br></code></pre></td></tr></table></figure>在最后一行添加<code>[System.Console]::OutputEncoding = [System.Text.Encoding]::UTF8</code></li><li>使用管道<code>a:ds -f 本地文件 &quot;用户提示词&quot; 2&gt;&amp;1 | Out-File -FilePath ds.md -Encoding utf8</code>(尚未验证，不过原理可信)</li></ol></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>实践指南</category>
      
      <category>大东西</category>
      
      <category>x-cmd</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>终端</tag>
      
      <tag>实践</tag>
      
      <tag>记录</tag>
      
      <tag>x-cmd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>远程连接win11主机</title>
    <link href="/2025/06/09/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5win11%E4%B8%BB%E6%9C%BA/"/>
    <url>/2025/06/09/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5win11%E4%B8%BB%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="远程连接win11主机"><a href="#远程连接win11主机" class="headerlink" title="远程连接win11主机"></a>远程连接win11主机</h1><h2 id="ssh（仅命令行）"><a href="#ssh（仅命令行）" class="headerlink" title="ssh（仅命令行）"></a>ssh（仅命令行）</h2><h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><ul><li><p>服务端防火墙要配置<strong>入站规则</strong>，开放22端口。</p></li><li><p>客户端的公钥应该放在哪。</p><p><strong>ChatGPT o3:</strong></p><blockquote><p><strong>管理员账户</strong>必须把公钥写入 <code>C:\ProgramData\ssh\administrators_authorized_keys</code><a id="note1">​<sup>1</sup></a>。<br><strong>非管理员账户</strong>用 <code>%USERPROFILE%\.ssh\authorized_keys</code><a id="note2">​<sup>2</sup></a>。</p></blockquote><p>事实证明这一点不准确，FixedIdiot上的weimo账户不被认为是管理员账户，但是放在<a href="#note2">2</a>没有效果，放在<a href="#note1">1</a>却可以。我估计是因为判断标准是<strong>用户组</strong>，weimo在Administrators用户组里。</p></li></ul><h2 id="RDP（微软远程连接，图形化界面）"><a href="#RDP（微软远程连接，图形化界面）" class="headerlink" title="RDP（微软远程连接，图形化界面）"></a>RDP（微软远程连接，图形化界面）</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p><strong>Win11 服务器端</strong></p><p> “设置 → 系统 → 远程桌面 → 打开”，记下计算机名并确认用户在“<strong>远程桌面用户</strong>”名单内。</p></li><li><p><strong>Win10 客户端</strong><br> 运行 <code>mstsc</code>​ → 输入服务器名&#x2F;IP:PORT。</p></li><li><p><strong>Tips</strong></p><ul><li>要想校园网可以访问实验室网络（校园网的内网）内的主机，则需要配置一下端口映射3389、TCP协议。</li><li>与其他远程桌面、多端协同的工具可能会产生冲突，例如同时Mouse without Boarders会导致鼠标消失。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>实践指南</category>
      
      <category>小玩意</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>工具用法</tag>
      
      <tag>实践指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不想干活，趁着新鲜劲再写点东西</title>
    <link href="/2025/06/06/%E4%B8%8D%E6%83%B3%E5%B9%B2%E6%B4%BB%EF%BC%8C%E8%B6%81%E7%9D%80%E6%96%B0%E9%B2%9C%E5%8A%B2%E5%86%8D%E5%86%99%E7%82%B9%E4%B8%9C%E8%A5%BF/"/>
    <url>/2025/06/06/%E4%B8%8D%E6%83%B3%E5%B9%B2%E6%B4%BB%EF%BC%8C%E8%B6%81%E7%9D%80%E6%96%B0%E9%B2%9C%E5%8A%B2%E5%86%8D%E5%86%99%E7%82%B9%E4%B8%9C%E8%A5%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="不想干活，趁着新鲜劲再写点东西"><a href="#不想干活，趁着新鲜劲再写点东西" class="headerlink" title="不想干活，趁着新鲜劲再写点东西"></a>不想干活，趁着新鲜劲再写点东西</h1><p>最近一直在做大模型语义缓存的项目，我总有种“不实”的感觉。这件事情最早两三年前就已经有人在做，但是目前市场上依然没看到有一个成熟的方案。我们给出的方案也依然是依葫芦画瓢，没有解决核心问题，或者说，我们目前搞不清楚什么是核心问题。不过我不想谈论烦心事，因为这种小事很难掩盖我拥有个人博客的喜悦。</p><p>我想说一说开心的事情。前阵子打乒乓球认识了一个管院的男生，很符合我对管理学专业的刻板印象，说起话来一股子擅长pua的公司老板的气息。他总是试图将他的暴论灌输给我，我其实很需要这样的挑战。以往我的社交面很窄，这给我带来了很多的困扰，但当我的人生开始踏入新的阶段，我非常渴望改变。我与人的联系除了发生在实验室，也随着我的爱好，比如打乒乓球，逐渐扩充。在乒乓球以外的另一个场景，我面临着更加严峻的挑战，所以我非常乐意有练手的机会。他似乎也对隔三差五的争论很感兴趣，一来二去我们居然也成了不错的朋友。与我每天相对固定的生活轨迹不同，他经常参加各类社交活动，露营、桌游，有时也会叫上我。我意识到这就是我想象中通过少量的中继节见识到更多节点的交友方式，这让我转变对他的对抗态度——他也许是我研究生阶段的贵人。</p><p>今天把成功让我的笔记本也可以写blog了，这种统一感还是很舒服的。</p><p>从实验室回来吃饭，准备晚上去打球，电梯口遇到了过去的室友，他即将读博。一直以来我害怕碰到他们，人家出于礼貌的寒暄会让我很尴尬。但我觉得我应该更坦荡一些，比起别人我确实浪费了三年的时间。但是我不应该觉得羞愧，我的朋友们也不会因为这个而轻视我。更何况，我现在面对的是全新的人生，积极向上的生活本身就充满了力量，足以抵抗也许会存在的闲言碎语。</p><p>开头这几篇blog杂乱宽泛，我不应该把blog当做草稿，而应当是成熟完整的文章，所以我以后尽可能给每一篇设计好一个固定的主题，做一些有深度的思考。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
      <category>日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>杂谈</tag>
      
      <tag>日志</tag>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>晚安，世界</title>
    <link href="/2025/06/06/%E6%99%9A%E5%AE%89%EF%BC%8C%E4%B8%96%E7%95%8C/"/>
    <url>/2025/06/06/%E6%99%9A%E5%AE%89%EF%BC%8C%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="晚安，世界"><a href="#晚安，世界" class="headerlink" title="晚安，世界"></a>晚安，世界</h1><p>现在是0:30，我本已下决心不再熬夜，但在我又一次听到个人域名的想法，我决定行动起来。从大约十点，一直到现在，我申请了lixiang.us.kg这个域名，创建了cloudflare上的图床，用hexo创建并上传第一篇博客到github。一切都打通以后，我跟着教程安装了第一个个性化主题——Fluid。非常感谢B站up主陶渊xiao明，他的三个视频完美解决了我的大多数问题。</p><p>个人博客给我的感受与本地的日记完全不同，它提供了一丝可能性，就像是黑暗的房子裂开了一道缝隙，传进来的光或许很小，但它改变了一切。在本地的笔记里，只有一个角色。回想起来，我已经很久没有好好写过日记。与自己交流的方式从与幻想的日记精灵对话变成了更加现实、冷峻地与自己对话，偶尔的散步成为了全部审视自身的时间。这个岁数我已很难沉浸到过去那种深度的幻想世界里，我无法对着本子或者屏幕虚构出一个听我诉说的朋友，我并不是觉得可笑，而是真的无法代入。这感觉就像是，我18年玩到第一部3A（刺客信条：起源）时，兴奋到梦里都是那个世界，但是面对去年的刺客信条：幻景，我已经无法忽视它的各种缺点。对，就是这样，如果我要在面前虚构一个朋友，我会不由自主地想到这件事情的不合理性（疑点）。就比如我会觉得虚构的朋友是孩童特有的心理现象，我感觉这也许是精神分析学的研究范畴。</p><p>不过不用去管那些事情，无关紧要。现在我的对面是无比真实的世界，而且我们的连接是最浪漫的方式之一——有限、偶然。这又让我充满了动力。</p><p>在我行动之前我对个人博客很怀疑，我分析不出它与本地日志有什么本质区别。这种怀疑在我准备关机回宿舍的一瞬间被彻底打消，看到Fluid这个主题氛围，我决定让我的博客以一个有仪式感的方式出现。《晚安，世界》这个念头蹦出来的时候，我感受到了那种随机却精准的推理方式——这个题目本只是为了说明夜深了，但却在与世界的第一次连接到意义上十分合适。</p><p>晚安，世界，明天见。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
      <category>日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>杂谈</tag>
      
      <tag>日志</tag>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
